Main idea for the project:

Have an interface in Processing with a screen of the actual game.
This screen will consist of:
  - Obstacle store on right side
  - Construction queue on left side
  - Game in middle
  - Stats on the bottom (Lvl, Pests Killed, $$, etc.)
  
We will implement pest movement with a recursive algorithm similar to KnightTour:
  - Pests' next move will be a random location around it. If it is an obstacle/wall, the algorithm will backtrack and check the next available spot for the pest. This will continue until a valid move is found for the pest so that it can be blocked by walls/obstacles.
  - The pests will be able to slowly (but surely) break down the obstacles little by little so that the player cannot just create a wall of obstacles around the food storage and expect to stall the game out.
  
The current objective of the game is to survive as many levels/until the last level while you protect a "Food storage" type of object from being completely eaten away by the pests. If it is completely eaten, then the player will lose.

The player will be able to click pests to damage/kill them to try and protect their food storage. 

========================================================================================================================

Which jobs are most crucial?
 - setting up the structure of the code-- how the diff classes interact and which classes there are
 - developing algorithms 
 - deciding at what stage the project could be submitted

Which components constitute core functionality vs extras?
 - core functionality: bugs appear, walk around obstacles, user can place obstacles, bugs eat up food
 - extras: store selection, setting up your own anti-bug bug army (?)

Which components are prerequisites for others?
 - bugs must be spawned for them to walk appropriately around obstacles
 - store/placement system must be set up for user to place obstacles

Which tasks can be delegated, and which must be collaboratively tackled?
 - developing specific algorithms can be delegated
 - everything else must be collaboratively tackled bc large portions of the project will be affected

What is the timeline, and how does it accommodate setbacks, course changes?
 - timeline: 
  6/1: get greenlighted; detailed features planning
  6/5: set up structure and develop algos
  6/7: core fxnality
  6/9: extras
  6/10: complete
 - accomodates setbacks by giving extra days to push off extras if there isn't time
